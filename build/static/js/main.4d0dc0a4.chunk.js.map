{"version":3,"sources":["FilterInput.js","Table.js","App.js","API.js","serviceWorker.js","index.js"],"names":["FilterInput","users","updateUsers","useState","inputValue","updateInput","useEffect","filteredUsers","filter","name","first","toLowerCase","indexOf","value","onChange","e","target","Table","sortedUsers","updateSortedUsers","order","headings","width","developerState","className","scope","onClick","heading","console","log","current","data","map","toString","sort","a","b","undefined","localeCompare","last","location","city","state","country","postcode","thumbnail","picture","cell","phone","gender","email","title","key","src","App","initialUsers","updateAvailableUsers","usersToRender","updateUsersToRender","axios","get","then","results","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d0dc0a4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst FilterInput = ({ users, updateUsers }) => {\n    const [inputValue, updateInput] = useState(\"\");\n\n    useEffect(() => {\n        const filteredUsers =\n        inputValue === \"\"\n        ? users\n        : users.filter(\n            ({ name: { first } }) =>\n            first.toLowerCase().indexOf(inputValue.toLowerCase()) >=0\n        );\n        updateUsers(filteredUsers);   \n    }, [inputValue, users]);\n\n    return (\n        <input value={inputValue} onChange={e => updateInput(e.target.value)} />\n    );\n};\nexport default FilterInput; ","import React, { useState, useEffect } from \"react\";\n\nconst Table = ({ users }) => {\n  const [sortedUsers, updateSortedUsers] = useState([]);\n  const [developerState, setDeveloperState] = useState({\n    users: [],\n    order: \"descend\",\n    filteredUsers: [],\n    headings: [\n      { name: \"Image\", width: \"10%\", order: \"descend\" },\n      { name: \"name\", width: \"10%\", order: \"descend\" },\n      { name: \"phone\", width: \"20%\", order: \"descend\" },\n      { name: \"email\", width: \"20%\", order: \"descend\" },\n      { name: \"dob\", width: \"10%\", order: \"descend\" }\n    ]\n  });\n  useEffect(() => updateSortedUsers(users), [users]);\n\n  return (\n    <div>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Title</th>\n            <th\n              scope=\"col\"\n              onClick={(heading) => {\n                console.log (\"Hello\")\n                let current = developerState.headings\n                .filter(data => data.name === heading)\n                .map(data => data.order)\n                .toString()\n\n                if (current === \"descend\") {\n                  current = \"ascend\"\n                } \n                else {current = \"descend\"}\n\n                const compare = (a,b) => {\n                  if (current === \"ascend\") {\n                    if (a[heading] === undefined \n                    ) {\n                      return 1\n                    } else if (b[heading] === undefined\n                      ) {\n                        return -1\n                      } else if (heading === \"first\") {\n                        return a[heading].first.localeCompare(b[heading].first)\n                      } else if (heading === \"last\") {\n                        return a[heading].last -b[heading].last\n                      } else {return a[heading].localeCompare(b[heading])}\n                  } else {\n                    if (a[heading] === undefined \n                      ) {\n                        return 1\n                      } else if (b[heading] === undefined\n                        ) {\n                          return -1\n                        } else if (heading === \"first\") {\n                          return b[heading].first.localeCompare(a[heading].first)\n                        } else if (heading === \"last\") {\n                          return b[heading].last -a[heading].last\n                        } else {return b[heading].localeCompare(a[heading])}\n                  }\n\n                }\n                const sortedUsers = developerState.filteredUsers.sort (compare)\n                const updateHeadings = developerState.headings.map (data => {\n                  data.order = data.name === heading ? current: data.order;\n                  return data\n                })\n              }}\n            >\n              First\n            </th>\n            <th scope=\"col\">Last</th>\n            <th scope=\"col\">Gender</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Phone</th>\n            <th scope=\"col\">Cell</th>\n            <th scope=\"col\">City</th>\n            <th scope=\"col\">State</th>\n            <th scope=\"col\">Country</th>\n            <th scope=\"col\">Postcode</th>\n            <th scope=\"col\">Picture</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sortedUsers.map(\n            ({\n              location: { city, state, country, postcode },\n              picture: { thumbnail },\n              cell,\n              phone,\n              gender,\n              email,\n              name: { first, last, title }\n            }) => (\n              <tr key={email}>\n                <td>{title}</td>\n                <th>{first}</th>\n                <td>{last}</td>\n                <td>{gender}</td>\n                <td>{email}</td>\n                <td>{phone}</td>\n                <td>{cell}</td>\n                <td>{city}</td>\n                <td>{state}</td>\n                <td>{country}</td>\n                <td>{postcode}</td>\n                <td>\n                  <img src={thumbnail} />\n                </td>\n\n                <td></td>\n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n\n\nexport default Table;","import React, { useEffect, useState } from \"react\";\nimport FilterInput from \"./FilterInput\";\nimport Table from \"./Table\";\nimport { getUsers } from \"./API\";\nimport \"./App.css\";\n\nfunction App() {\n    const [initialUsers, updateAvailableUsers] = useState ([]);\n    const [usersToRender, updateUsersToRender] = useState ([]);\n\n    useEffect(() => {\n        getUsers().then(({ data: { results } }) => updateAvailableUsers(results));\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h1>Employee Directory</h1>\n            <p>Please input User's first name to filter by first name.</p>\n            <FilterInput users={initialUsers} updateUsers={updateUsersToRender} />\n            <Table users={usersToRender} />\n        </div>\n    );\n}\nexport default App;","import axios from \"axios\";\n\nexport const getUsers = function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n};","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      window.location.hostname === '[::1]' ||\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          checkValidServiceWorker(swUrl, config);\n\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n               \n                console.log('Content is cached for offline use.');\n\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    \n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n      \n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}